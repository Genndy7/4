#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <algorithm>

using namespace std;

// Структура для хранения информации о ребенке
struct Child {
    string surname;
    string address;
    string gender;
    int daysVisited;
};

// Функция для загрузки данных из файла
void loadDataFromFile(vector<Child>& children, string fileName) {
    ifstream file(fileName);
    if (file.is_open()) {
        while (!file.eof()) {
            Child child;
            getline(file, child.surname, ':');
            getline(file, child.address, ':');
            getline(file, child.gender, ':');
            file >> child.daysVisited;
            file.ignore(); // Пропустить символ переноса строки
            children.push_back(child);
        }
        file.close();
    } else {
        cout << "Не удается открыть файл " << fileName << endl;
    }
}

// Функция для добавления новых данных в файл
void addDataToFile(vector<Child>& children, string fileName) {
    ofstream file(fileName, ios::app); // Открываем файл для дозаписи
    if (file.is_open()) {
        Child newChild;
        cout << "Введите фамилию: ";
        cin >> newChild.surname;
        cout << "Введите адрес: ";
        cin >> newChild.address;
        cout << "Введите пол (муж/жен): ";
        cin >> newChild.gender;
        cout << "Введите количество дней посещения: ";
        cin >> newChild.daysVisited;
        file << newChild.surname << ":" << newChild.address << ":" << newChild.gender << ":" << newChild.daysVisited << endl;
        children.push_back(newChild);
        file.close();
    } else {
        cout << "Не удается открыть файл " << fileName << endl;
    }
}

// Функция для сортировки базы данных по алфавиту (по фамилии)
void sortByAlphabet(vector<Child>& children) {
    sort(children.begin(), children.end(), [](const Child& a, const Child& b) {
        return a.surname < b.surname;
    });
}

// Функция для определения самого болеющего ребенка
void findMostSickChild(const vector<Child>& children) {
    int maxDays = 0;
    string maxChildSurname;
    for (const auto& child : children) {
        if (child.daysVisited > maxDays) {
            maxDays = child.daysVisited;
            maxChildSurname = child.surname;
        }
    }
    cout << "Самый болеющий ребенок: " << maxChildSurname << " (" << maxDays << " дней)" << endl;
}

// Функция для вывода списка детей, проживающих на заданной улице
void printChildrenByAddress(const vector<Child>& children, string address) {
    bool found = false;
    for (const auto& child : children) {
        if (child.address == address) {
            cout << child.surname << endl;
            found = true;
        }
    }
    if (!found) {
        cout << "Нет детей, проживающих на улице " << address << endl;
    }
}

// Функция для определения, кто больше болеет - мальчики или девочки
void compareGenderSickness(const vector<Child>& children) {
    int boysTotal = 0, girlsTotal = 0;
    for (const auto& child : children) {
        if (child.gender == "муж") {
            boysTotal += child.daysVisited;
        } else {
            girlsTotal += child.daysVisited;
        }
    }
    if (boysTotal > girlsTotal) {
        cout << "Мальчики болеют больше, чем девочки" << endl;
    } else if (girlsTotal > boysTotal) {
        cout << "Девочки болеют больше, чем мальчики" << endl;
    } else {
        cout << "Мальчики и девочки болеют одинаково" << endl;
    }
}

int main() {
    vector<Child> children;
    string fileName;

    do {
        cout << "Выберете номер действия:" << endl;

        cout << "1. Загрузить все данные из файла на экран" << endl;
        cout << "2. Ввести новые данные в файл" << endl;
        cout << "3. Добавить данные в конец файла" << endl;
        cout << "4. Сортировка базы данных по алфавиту (по фамилии)" << endl;
        cout << "5. Определить самого болеющего ребенка" << endl;
        cout << "6. Вывести список детей, проживающих на данной улице" << endl;
        cout << "7. Определить, кто больше болеет - мальчики или девочки" << endl;
        cout << "0. Выход из программы" << endl;
        cout << "Ваш выбор: ";

        int choice;
        cin >> choice;

        switch (choice) {
            case 1:
                cout << "Введите имя и путь к файлу: ";
                cin >> fileName;
                loadDataFromFile(children, fileName);
                for (const auto& child : children) {
                    cout << "Фамилия: " << child.surname << ", Адрес: " << child.address << ", Пол: " << child.gender << ", Дней посещений: " << child.daysVisited << endl;
                }
                break;
            case 2:
                cout << "Введите имя и путь к файлу: ";
                cin >> fileName;
                addDataToFile(children, fileName);
                break;
            case 3:
                cout << "Введите имя и путь к файлу: ";
                cin >> fileName;
                addDataToFile(children, fileName);
                break;
            case 4:
                sortByAlphabet(children);
                break;
            case 5:
                findMostSickChild(children);
                break;
            case 6:
                cout << "Введите адрес: ";
                string address;
                cin >> address;
                printChildrenByAddress(children, address);
                break;
            case 7:
                compareGenderSickness(children);
                break;
            case 0:
                cout << "Выход из программы" << endl;
                break;
            default:
                cout << "Неверный выбор. Попробуйте еще раз." << endl;
        }
    } while (choice != 0);

    return 0;
}
