#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>

using namespace std;

struct Child {
    string surname;
    string address;
    char gender;
    int absent;
};

using ChildrenDB = vector<Child>;

void loadFromFile(ChildrenDB& kids, string file) {
    ifstream f(file, ios::binary);
    if (f.is_open()) {
        Child k;
        while (f.read(reinterpret_cast<char*>(&k), sizeof(k))) {
            kids.push_back(k);
        }
        f.close();
    } else {
        cout << "Error: " << file << endl;
    }
}

void saveToFile(const ChildrenDB& kids, string file) {
    ofstream f(file, ios::binary | ios::trunc);
    if (f.is_open()) {
        for (auto& k : kids) {
            f.write(reinterpret_cast<const char*>(&k), sizeof(k));
        }
        f.close();
    } else {
        cout << "Error: " << file << endl;
    }
}

void addToFile(const Child& k, string file) {
    ofstream f(file, ios::binary | ios::app);
    if (f.is_open()) {
        f.write(reinterpret_cast<const char*>(&k), sizeof(k));
        f.close();
    } else {
        cout << "Error: " << file << endl;
    }
}

void sortByName(ChildrenDB& kids) {
    sort(kids.begin(), kids.end(), [](const Child& a, const Child& b) {
        return a.surname < b.surname;
    });
}

Child findSickest(const ChildrenDB& kids) {
    Child worst = kids[0];
    for (size_t i = 1; i < kids.size(); ++i) {
        if (kids[i].absent > worst.absent) {
            worst = kids[i];
        }
    }
    return worst;
}

void listByAddress(const ChildrenDB& kids, string addr) {
    cout << "Kids at " << addr << ":" << endl;
    for (auto& k : kids) {
        if (k.address == addr) {
            cout << "- " << k.surname << endl;
        }
    }
}

int countGender(const ChildrenDB& kids, char g) {
    int total = 0;
    for (auto& k : kids) {
        if (k.gender == g) {
            total += k.absent;
        }
    }
    return total;
}

int main() {
    ChildrenDB kids;
    int choice;
    string file, addr;
    Child k;

    do {
        cout << "1. Load\n2. Save\n3. Add\n4. Sort\n5. Sickest\n6. List\n7. Gender\n0. Exit" << endl;
        cout << "Choice: ";
        cin >> choice;

        switch (choice) {
        case 1:
            cout << "File: ";
            cin >> file;
            loadFromFile(kids, file);
            break;
        case 2:
            cout << "File: ";
            cin >> file;
            saveToFile(kids, file);
            break;
        case 3:
            cout << "Surname: ";
            cin >> k.surname;
            cout << "Address: ";
            cin >> k.address;
            cout << "Gender (M/F): ";
            cin >> k.gender;
            cout << "Absent: ";
            cin >> k.absent;
            cout << "File: ";
            cin >> file;
            addToFile(k, file);
            break;
        case 4:
            sortByName(kids);
            break;
        case 5:
            cout << "Sickest: " << findSickest(kids).surname << endl;
            break;
        case 6:
            cout << "Address: ";
            cin >> addr;

            listByAddress(kids, addr);
            break;
        case 7:
            cout << "Boys: " << countGender(kids, 'M') << endl;
            cout << "Girls: " << countGender(kids, 'F') << endl;
            break;
        }
    } while (choice != 0);

    return 0;
}
